#
# A defination for the macros in Unity3D
#
# Use the format:
#	{%
#		%$ Name = {} $%
#		%$ Synopsis = {} $%
#		%$ Description = {} $%
#	%}
#

#Most of marcos are from here http://docs.unity3d.com/Manual/SL-BuiltinMacros.html 


#-----------------------------Surface shader pass indicators -------------------#
#------------------------------------------------------------------------------#

{%
	%$ Name = {UNITY_PASS_FORWARDBASE} $%
	%$ Synopsis = {} $%
	%$ Description = {forward rendering base pass (main directional light, lightmaps, SH).} $%
%}

{%
	%$ Name = {UNITY_PASS_FORWARDADD} $%
	%$ Synopsis = {} $%
	%$ Description = { forward rendering additive pass (one light per pass).} $%
%}

{%
	%$ Name = {UNITY_PASS_PREPASSBASE} $%
	%$ Synopsis = {} $%
	%$ Description = {deferred lighting base pass (renders normals & specular exponent).} $%
%}

{%
	%$ Name = {UNITY_PASS_PREPASSFINAL} $%
	%$ Synopsis = {} $%
	%$ Description = {deferred lighting final pass (applies lighting & textures).} $%
%}

{%
	%$ Name = {UNITY_PASS_SHADOWCASTER} $%
	%$ Synopsis = {} $%
	%$ Description = {shadow caster rendering pass.} $%
%}

{%
	%$ Name = {UNITY_PASS_DEFERRED} $%
	%$ Synopsis = {} $%
	%$ Description = {Deferred shading pass (renders g buffer).} $%
%}

#-----------------------------Target platform ---------------------------------#
#-----------------------------------------------------------------------------#

{%
	%$ Name = {SHADER_API_D3D11} $%
	%$ Synopsis = {} $%
	%$ Description = {desktop Direct3D 11} $%
%}

{%
	%$ Name = {SHADER_API_GLCORE} $%
	%$ Synopsis = {} $%
	%$ Description = {Desktop OpenGL "core" (GL 3/4)} $%
%}

{%
	%$ Name = {SHADER_API_GLES} $%
	%$ Synopsis = {} $%
	%$ Description = {OpenGL ES 2.0 } $%
%}

{%
	%$ Name = {SHADER_API_GLES3} $%
	%$ Synopsis = {} $%
	%$ Description = {OpenGL ES 3.0/3.1} $%
%}

{%
	%$ Name = {SHADER_API_METAL} $%
	%$ Synopsis = {} $%
	%$ Description = {iOS/Mac Metal} $%
%}

{%
	%$ Name = {SHADER_API_VULKAN} $%
	%$ Synopsis = {} $%
	%$ Description = {Vulkan} $%
%}

{%
	%$ Name = {SHADER_API_D3D11_9X} $%
	%$ Synopsis = {} $%
	%$ Description = {Direct3D 11 “feature level 9.x” target for Universal Windows Platform} $%
%}

{%
	%$ Name = {SHADER_API_PS4} $%
	%$ Synopsis = {} $%
	%$ Description = {PlayStation 4. SHADER_API_PSSL is also defined.} $%
%}

{%
	%$ Name = {SHADER_TARGET_GLSL} $%
	%$ Synopsis = {} $%
	%$ Description = {shading language is GLSL (always true for OpenGL/GLES platforms).} $%
%}

{%
	%$ Name = {SHADER_API_MOBILE} $%
	%$ Synopsis = {} $%
	%$ Description = {defined for all general mobile platforms (GLES, GLES3, METAL).} $%
%}

#-----------------------------Platform difference helpers -------------------#
#------------------------------------------------------------------------------

{%
	%$ Name = { UNITY_PROJ_COORD } $%
	%$ Synopsis = {
		UNITY_PROJ_COORD(a);
	} $%
	%$ Description = { given a 4-component vector, return a texture coordinate suitable for projected texture reads. On most platforms this returns the given value directly. } $%
%}

{%
	%$ Name = {UNITY_ATTEN_CHANNEL } $%
	%$ Synopsis = {} $%
	%$ Description = { which channel of light attenuation texture contains the data; used in per-pixel lighting code. Defined to either ‘r’ or ‘a’.} $%
%}

{%
	%$ Name = {UNITY_HALF_TEXEL_OFFSET } $%
	%$ Synopsis = {} $%
	%$ Description = { defined on platforms that need a half-texel offset adjustment in mapping texels to pixels (e.g. Direct3D 9).} $%
%}

{%
	%$ Name = {UNITY_UV_STARTS_AT_TOP} $%
	%$ Synopsis = {} $%
	%$ Description = { 
	always defined with value or 1 or 0; value of one is on platforms where texture V coordinate is zero at “top of the texture”. 
	Direct3D-like platforms use value of 1; OpenGL-like platforms use value of 0.} $%
%}

{%
	%$ Name = {UNITY_MIGHT_NOT_HAVE_DEPTH_TEXTURE } $%
	%$ Synopsis = {} $%
	%$ Description = {defined if a platform might emulate shadow maps or depth textures by manually rendering depth into a texture.} $%
%}

{%
	%$ Name = {UNITY_NEAR_CLIP_VALUE } $%
	%$ Synopsis = {} $%
	%$ Description = { defined to the value of near clipping plane; Direct3D-like platforms use 0.0 while OpenGL-like platforms use –1.0.} $%
%}

{%
	%$ Name = {UNITY_COMPILER_HLSL } $%
	%$ Synopsis = {} $%
	%$ Description = {determine which underlying shader compiler is used; use in case of subtle syntax differences force you to write different shader code.} $%
%}



{%
	%$ Name = {UNITY_COMPILER_HLSL2GLSL } $%
	%$ Synopsis = {} $%
	%$ Description = {determine which underlying shader compiler is used; use in case of subtle syntax differences force you to write different shader code.} $%
%}



{%
	%$ Name = {UNITY_CAN_COMPILE_TESSELLATION } $%
	%$ Synopsis = {} $%
	%$ Description = {defined when the shader compiler “understands” tessellation shader HLSL syntax (currently only D3D11).} $%
%}



{%
	%$ Name = {UNITY_INITIALIZE_OUTPUT} $%
	%$ Synopsis = {UNITY_INITIALIZE_OUTPUT(type,name)} $%
	%$ Description = { initialize variable name of given type to zero.} $%
%}



{%
	%$ Name = {UNITY_COMPILER_HLSL} $%
	%$ Synopsis = {} $%
	%$ Description = {
	indicates which shader compiler is being used to compile shaders. 
	Respectively, Microsoft’s HLSL (used for DX11, Xbox360, WinRT), 
	HLSL to GLSL translator (used for iOS/Android and desktop OpenGL when #pragma glsl), 
	and NVIDIA’s Cg (used for D3D9 and non-GLSL desktop OpenGL targets). 
	Use this if you run into very specific corner case shader syntax handling differences between the compilers, 
	and want to write different code for each compiler.} $%
%}



{%
	%$ Name = {UNITY_COMPILER_HLSL2GLSL} $%
	%$ Synopsis = {} $%
	%$ Description = {
	indicates which shader compiler is being used to compile shaders. 
	Respectively, Microsoft’s HLSL (used for DX11, Xbox360, WinRT), 
	HLSL to GLSL translator (used for iOS/Android and desktop OpenGL when #pragma glsl), 
	and NVIDIA’s Cg (used for D3D9 and non-GLSL desktop OpenGL targets). 
	Use this if you run into very specific corner case shader syntax handling differences between the compilers, 
	and want to write different code for each compiler.} $%
%}



{%
	%$ Name = {UNITY_COMPILER_CG } $%
	%$ Synopsis = {} $%
	%$ Description = {
	indicates which shader compiler is being used to compile shaders. 
	Respectively, Microsoft’s HLSL (used for DX11, Xbox360, WinRT), 
	HLSL to GLSL translator (used for iOS/Android and desktop OpenGL when #pragma glsl), 
	and NVIDIA’s Cg (used for D3D9 and non-GLSL desktop OpenGL targets). 
	Use this if you run into very specific corner case shader syntax handling differences between the compilers, 
	and want to write different code for each compiler.} $%
%}


#-----------------------------Shadow mapping macros -------------------#
#----------------------------------------------------------------------#


{%
	%$ Name = {UNITY_DECLARE_SHADOWMAP} $%
	%$ Synopsis = {UNITY_DECLARE_SHADOWMAP(tex)} $%
	%$ Description = {declares a shadowmap texture variable with name “tex”.} $%
%}



{%
	%$ Name = {UNITY_SAMPLE_SHADOW} $%
	%$ Synopsis = {UNITY_SAMPLE_SHADOW(tex,uv) } $%
	%$ Description = { samples shadowmap texture “tex” at given “uv” coordinate (XY components are texture location, Z component is depth to compare with). Returns single float value with the shadow term in 0..1 range.} $%
%}



{%
	%$ Name = {UNITY_SAMPLE_SHADOW_PROJ} $%
	%$ Synopsis = {UNITY_SAMPLE_SHADOW_PROJ(tex,uv)} $%
	%$ Description = { similar to above, but does a projective shadowmap read. “uv” is a float4, all other components are divided by .w for doing the lookup.} $%
%}


{%
	%$ Name = {TEXTURE2D_SHADOW_PARAM} $%
	%$ Synopsis = {TEXTURE2D_SHADOW_PARAM(textureName, samplerName)} $%
	%$ Description = {unity urp declares a shadowmap texture variable with name “tex”.} $%
%}



{%
	%$ Name = {SAMPLE_TEXTURE2D_SHADOW} $%
	%$ Synopsis = {SAMPLE_TEXTURE2D_SHADOW(textureName, samplerName, coord3) } $%
	%$ Description = { unity urp samples shadowmap texture “tex” at given “uv” coordinate (XY components are texture location, Z component is depth to compare with). Returns single float value with the shadow term in 0..1 range.} $%
%}

#-----------------------------Constant buffer macros -------------------#
#----------------------------------------------------------------------#


{%
	%$ Name = {CBUFFER_START} $%
	%$ Synopsis = {Use CBUFFER_START(name)} $%
	%$ Description = {} $%
%}



{%
	%$ Name = { CBUFFER_END} $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}

#--------------------------Others ----------------------------------#
#-------------------------------------------------------------------#
{%
	%$ Name = { TRANSFORM_TEX } $%
	%$ Synopsis = { TRANSFORM_TEXT(uv, texture)} $%
	%$ Description = {Vertex program uses the TRANSFORM_TEX macro from UnityCG.cginc to make sure texture scale&offset is applied correctly.} $%
%}

{%
	%$ Name = { DIRECTIONAL } $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}

{%
	%$ Name = { DIRECTIONAL_COOKIE } $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}


{%
	%$ Name = { POINT } $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}

{%
	%$ Name = { POINT_NOATT } $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}

{%
	%$ Name = { POINT_COOKIE } $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}

{%
	%$ Name = { SPOT } $%
	%$ Synopsis = {} $%
	%$ Description = {} $%
%}


#-----------------------------Custom mapping macros -------------------#
#----------------------------------------------------------------------#

{%
	%$ Name = { UNITY_COLORSPACE_GAMMA } $%
	%$ Synopsis = {} $%
	%$ Description = {Is Gamma Space} $%
%}

{%
	%$ Name = { SHADER_TARGET  } $%
	%$ Synopsis = {} $%
	%$ Description = { For example,#if SHADER_TARGET < 30 } $%
%}

{%
	%$ Name = { UNITY_VERSION  } $%
	%$ Synopsis = {} $%
	%$ Description = { For example, UNITY_VERSION is 501 for Unity 5.0.1 } $%
%}

{%
	%$ Name = { shader_feature  } $%
	%$ Synopsis = {} $%
	%$ Description = { 定义变体} $%
%}

{%
	%$ Name = { multi_compile  } $%
	%$ Synopsis = {} $%
	%$ Description = { 定义变体} $%
%}

{%
	%$ Name = { UNITY_VERTEX_INPUT_INSTANCE_ID } $%
	%$ Synopsis = {} $%
	%$ Description = { INSTANCE } $%
%}

{%
	%$ Name = { _CameraDepthTexture } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 深度纹理 } $%
%}

{%
	%$ Name = { RenderType } $%
	%$ Synopsis = {} $%
	%$ Description = { 渲染类型 } $%
%}

{%
	%$ Name = { Transparent } $%
	%$ Synopsis = {} $%
	%$ Description = { 渲染类型 } $%
%}

{%
	%$ Name = { Opaque } $%
	%$ Synopsis = {} $%
	%$ Description = { 渲染类型 } $%
%}

{%
	%$ Name = { unity_WorldTransformParams } $%
	%$ Synopsis = {} $%
	%$ Description = { w is usually 1.0, or -1.0 for odd-negative scale transforms } $%
%}

{%
	%$ Name = { UNITY_SHOULD_SAMPLE_SH } $%
	%$ Synopsis = {} $%
	%$ Description = { 否启用球谐光照 } $%
%}

{%
	%$ Name = { UNITY_FOG_COORDS } $%
	%$ Synopsis = {UNITY_FOG_COORDS(x)} $%
	%$ Description = { x:对应的存储通道 } $%
%}

{%
	%$ Name = { UNITY_SHADOW_COORDS } $%
	%$ Synopsis = {UNITY_SHADOW_COORDS(x)} $%
	%$ Description = { x:对应的存储通道 } $%
%}

{%
	%$ Name = { VERTEXLIGHT_ON } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { UNITY_REVERSED_Z } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { UNITY_NEAR_CLIP_VALUE } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { UNITY_BRANCH } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { UNITY_LIGHTMAP_FULL_HDR } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { LIGHTMAP_HDR_MULTIPLIER } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { LIGHTMAP_HDR_EXPONENT } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity 内置宏定义 } $%
%}

{%
	%$ Name = { unity_SHAr } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { unity_SHAg } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { unity_SHAb } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { unity_SHBr } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { unity_SHBg } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { unity_SHBb } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { unity_SHC } $%
	%$ Synopsis = {} $%
	%$ Description = { 球谐函数相关变量 } $%
%}

{%
	%$ Name = { SHADOWS_SHADOWMASK } $%
	%$ Synopsis = {} $%
	%$ Description = { shadowmask相关 } $%
%}

{%
	%$ Name = { enable_d3d11_debug_symbols } $%
	%$ Synopsis = {} $%
	%$ Description = { shader调试 } $%
%}

{%
	%$ Name = { TEXTURE2D } $%
	%$ Synopsis = {TEXTURE2D(_MainTex)} $%
	%$ Description = { Unity URP 声明纹理 } $%
%}

{%
	%$ Name = { SAMPLER } $%
	%$ Synopsis = {SAMPLER(sampler_MainTex)} $%
	%$ Description = { Unity URP 声明纹理采样器 } $%
%}

{%
	%$ Name = { _MAIN_LIGHT_SHADOWS } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity URP 主光Shadow Keyword } $%
%}

{%
	%$ Name = { _MAIN_LIGHT_SHADOWS_CASCADE } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity URP 主光 cascade Shadow  Keyword } $%
%}

{%
	%$ Name = { _ADDITIONAL_LIGHTS } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity URP 点光Keyword } $%
%}

{%
	%$ Name = { _ADDITIONAL_LIGHT_SHADOWS } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity URP 点光 Shadow Keyword } $%
%}

{%
	%$ Name = { _SHADOWS_SOFT } $%
	%$ Synopsis = {} $%
	%$ Description = { Unity Soft Shadow Keyword } $%
%}

{%
	%$ Name = {ZERO_INITIALIZE} $%
	%$ Synopsis = {ZERO_INITIALIZE(type, name)} $%
	%$ Description = { unity urp initialize variable name of given type to zero.} $%
%}